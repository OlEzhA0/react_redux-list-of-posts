{"version":3,"sources":["store/loading.ts","store/posts.ts","store/loaded.ts","store/index.ts","components/SpinnerLoad.tsx","helpers/api.ts","components/DownloadButton.tsx","components/Input.tsx","components/PostsList.tsx","helpers/debounce.js","helpers/filterPosts.ts","App.tsx","index.tsx"],"names":["setLoading","status","type","loadingReducer","state","action","postReducer","posts","map","post","comments","filter","comm","id","commId","postId","loadedReducer","rootReducer","combineReducers","loading","loaded","isLoading","getPosts","isLoaded","store","createStore","SpinnerLoad","className","getData","url","a","fetch","getInfo","infoToJson","json","preparedDatas","Promise","all","users","preparedPosts","user","find","ownerPost","userId","postsComments","comment","DownloadButton","useSelector","onClick","disabled","SearchInput","startDebounce","placeholder","onChange","PostsList","useState","query","setQuery","dispatch","useDispatch","debounceWrapper","f","delay","timerId","clearTimeout","arg","setTimeout","debounce","value","visiblePosts","useMemo","title","toLocaleLowerCase","body","replace","includes","filterPosts","e","target","key","name","email","App","then","data","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"sRAIaA,EAAa,SAACC,GAAD,MAAsB,CAAEC,KAF/B,aAEiDD,WAYrDE,EAVQ,WAAuC,IAAtCC,EAAqC,wDAAtBC,EAAsB,uCAC3D,OAAQA,EAAOH,MACb,IANe,aAOb,OAAOG,EAAOJ,OAEhB,QACE,OAAOG,I,OCiBEE,EAnBK,WAA8C,IAA7CF,EAA4C,uDAApC,GAAcC,EAAsB,uCAC/D,OAAQA,EAAOH,MACb,IAVc,YAWZ,OAAOG,EAAOE,MAEhB,IAZgB,cAad,OAAOH,EAAMI,KAAI,SAAAC,GAAI,kCAChBA,GADgB,IAEnBC,SAAUD,EAAKC,SAASC,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAOR,EAAOS,eAG9D,IAjBgB,cAkBd,OAAOV,EAAMO,QAAO,SAAAF,GAAI,OAAIA,EAAKI,KAAOR,EAAOU,UAEjD,QACE,OAAOX,ICTEY,EAVO,WAAuC,IAAtCZ,EAAqC,wDAAtBC,EAAsB,uCAC1D,OAAQA,EAAOH,MACb,IANc,YAOZ,OAAO,EAET,QACE,OAAOE,ICPPa,EAAcC,YAAgB,CAClCC,QAAShB,EACTI,MAAOD,EACPc,OAAQJ,IAKGK,EAAY,SAACjB,GAAD,OAAsBA,EAAMe,SACxCG,EAAW,SAAClB,GAAD,OAAsBA,EAAMG,OACvCgB,EAAW,SAACnB,GAAD,OAAsBA,EAAMgB,QAMrCI,EAJDC,YACZR,GChBWS,EAAc,WACzB,OACE,yBAAKC,UAAU,sBACb,yBAAKA,UAAU,gBACb,8BACA,8BACA,8BACA,iC,gCCPFC,EAAO,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACQC,MAAM,GAAD,OAHR,mEAGQ,OAAmBF,EAAnB,UADb,cACRG,EADQ,OAERC,EAAaD,EAAQE,OAFb,kBAIPD,GAJO,2CAAH,sDAOAE,EAAa,uCAAG,sCAAAL,EAAA,sEACYM,QAAQC,IAAI,CACjDT,EAAQ,SACRA,EAAQ,SACRA,EAAQ,cAJiB,0CACpBrB,EADoB,KACb+B,EADa,KACN5B,EADM,KAOrB6B,EAAgBhC,EAAMC,KAAI,SAACC,GAC/B,IAAM+B,EAAOF,EAAMG,MAAK,SAACC,GAAD,OAAqBA,EAAU7B,KAAOJ,EAAKkC,UAC7DC,EAAgBlC,EAASC,QAAO,SAACkC,GAAD,OAAuBA,EAAQ9B,SAAWN,EAAKI,MAErF,OAAO,2BACFJ,GADL,IAEE+B,OACA9B,SAAUkC,OAda,kBAkBpBL,GAlBoB,2CAAH,qDCDbO,EAAkC,SAAC,GAAiB,IAAflB,EAAc,EAAdA,QAC1CT,EAAU4B,YAAY1B,GAE5B,OACE,oCACE,4BACEnB,KAAK,SACL8C,QAASpB,EACTqB,SAAU9B,EACVQ,UAAU,kBAJZ,eCPOuB,EAA+B,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAG7C,OACE,yBAAKxB,UAAU,kBACb,2BACEzB,KAAK,OACLyB,UAAU,QACVyB,YAAY,0BACZC,SAAUF,MCPLG,EAAsB,WAAO,IAAD,EACbC,mBAAS,IADI,mBAChCC,EADgC,KACzBC,EADyB,KAEjClD,EAAgBwC,YAAYzB,GAC5BoC,EAAWC,cAEXC,ECbgB,SAACC,EAAGC,GAC1B,IAAIC,EAEJ,OAAO,WACLC,aAAaD,GADI,2BAARE,EAAQ,yBAARA,EAAQ,gBAEjBF,EAAUG,WAAU,WAAV,GAAWL,EAAGC,GAAd,OAAwBG,KDQZE,EACtB,SAACC,GAAD,OAAmBX,EAASW,KAC5B,KAOIC,EAAuBC,mBAC3B,kBEvBuB,SAAC/D,EAAeiD,GACzC,OAAKA,EAIEjD,EACJI,QAAO,SAAAF,GAAI,OACVA,EAAK8D,MAAMC,oBAAsB/D,EAAKgE,KAAKD,mBAE1CE,QAAQ,MAAO,KACfC,SAASnB,EAAMgB,oBAAoBE,QAAQ,MAAO,SAR9CnE,EFqBDqE,CAAYrE,EAAOiD,KACzB,CAACjD,EAAOiD,IAGV,OACE,oCACA,kBAAC,EAAD,CAAaL,cAXO,SAAC0B,GACrBjB,EAAgBiB,EAAEC,OAAOV,UAWtBC,EAAa7D,KAAI,SAAAC,GAAI,OACpB,yBAAKkB,UAAU,OAAOoD,IAAKtE,EAAKI,IAC9B,4BACEX,KAAK,SACLyB,UAAU,eACVqB,QAAS,kBAAMU,EP3BoB,CAAExD,KAJ7B,cAIgDa,OO2BrBN,EAAKI,OAH1C,eAOA,uBAAGc,UAAU,eACX,0BAAMA,UAAU,YACblB,EAAKI,GADR,KAICJ,EAAK8D,OAER,uBAAG5C,UAAU,cACVlB,EAAKgE,MAEPhE,EAAKC,SAASF,KAAI,SAAAqC,GAAO,OACxB,yBAAKlB,UAAU,aAAaoD,IAAKlC,EAAQhC,IACvC,yBAAKc,UAAU,QACb,uBAAGA,UAAU,cACVkB,EAAQmC,MAEX,uBAAGrD,UAAU,eACVkB,EAAQoC,OAEX,uBAAGtD,UAAU,cACVkB,EAAQ4B,MAEX,4BACE9C,UAAU,eACVzB,KAAK,SACL8C,QAAS,kBAAMU,EPzDc,CAAExD,KAJ7B,cAIgDY,OOyDf+B,EAAQhC,OAH7C,qBGlBDqE,EA9BH,WACV,IAAM/D,EAAU4B,YAAY1B,GACtBD,EAAS2B,YAAYxB,GACrBmC,EAAWC,cAajB,OACE,yBAAKhC,UAAU,OACb,wBAAIA,UAAU,SAAd,wBACEP,GACA,kBAAC,EAAD,CACEQ,QAhBa,WACnB8B,EAAS1D,GAAW,IAEpBmC,IACGgD,MAAK,SAAAC,GACJ1B,EVjBwC,CAAExD,KAJhC,YAIiDK,MUiBrC6E,IACtB1B,ETpBwB,CAAExD,KAFhB,iBSwBXmF,SAAQ,kBAAM3B,EAAS1D,GAAW,UAWlCmB,GAAW,kBAAC,EAAD,MACXC,GAAU,kBAAC,EAAD,QC7BXkE,EAAO,kBACX,kBAAC,IAAD,CAAU9D,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,SAKN+D,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.41561b07.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\nconst IS_LOADING = 'IS_LOADING';\n\nexport const setLoading = (status: boolean) => ({ type: IS_LOADING, status });\n\nconst loadingReducer = (state = false, action: AnyAction) => {\n  switch (action.type) {\n    case IS_LOADING:\n      return action.status;\n\n    default:\n      return state;\n  }\n};\n\nexport default loadingReducer;\n","import { AnyAction } from 'redux';\n\nconst SET_POSTS = 'SET_POSTS';\nconst DELETE_COMM = 'DELETE_COMM';\nconst DELETE_POST = 'DELETE_POST';\n\nexport const setPostsData = (posts: Post[]) => ({ type: SET_POSTS, posts });\nexport const deleteComm = (commId: number) => ({ type: DELETE_COMM, commId });\nexport const deletePost = (postId: number) => ({ type: DELETE_POST, postId });\n\nconst postReducer = (state = [] as Post[], action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n\n    case DELETE_COMM:\n      return state.map(post => ({\n        ...post,\n        comments: post.comments.filter(comm => comm.id !== action.commId),\n      }));\n\n    case DELETE_POST:\n      return state.filter(post => post.id !== action.postId);\n\n    default:\n      return state;\n  }\n};\n\nexport default postReducer;\n","import { AnyAction } from 'redux';\n\nconst IS_LOADED = 'IS_LOADED';\n\nexport const setLoaded = () => ({ type: IS_LOADED });\n\nconst loadedReducer = (state = false, action: AnyAction) => {\n  switch (action.type) {\n    case IS_LOADED:\n      return true;\n\n    default:\n      return state;\n  }\n};\n\nexport default loadedReducer;\n","import { createStore, combineReducers } from 'redux';\nimport loadingReducer from './loading';\nimport postReducer from './posts';\nimport loadedReducer from './loaded';\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  posts: postReducer,\n  loaded: loadedReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const isLoading = (state: RootState) => state.loading;\nexport const getPosts = (state: RootState) => state.posts;\nexport const isLoaded = (state: RootState) => state.loaded;\n\nconst store = createStore(\n  rootReducer,\n);\n\nexport default store;\n","import React from 'react';\n\nexport const SpinnerLoad = () => {\n  return (\n    <div className=\"Spinner__Container\">\n      <div className=\"lds-ellipsis\">\n        <div />\n        <div />\n        <div />\n        <div />\n      </div>\n    </div>\n  );\n};\n","const GENERAL_LINK = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/';\n\nconst getData = async (url: string) => {\n  const getInfo = await fetch(`${GENERAL_LINK}${url}.json`);\n  const infoToJson = getInfo.json();\n\n  return infoToJson;\n};\n\nexport const preparedDatas = async () => {\n  const [posts, users, comments] = await Promise.all([\n    getData('posts'),\n    getData('users'),\n    getData('comments'),\n  ]);\n\n  const preparedPosts = posts.map((post: Post) => {\n    const user = users.find((ownerPost: User) => ownerPost.id === post.userId);\n    const postsComments = comments.filter((comment: Comments) => comment.postId === post.id);\n\n    return {\n      ...post,\n      user,\n      comments: postsComments,\n    };\n  });\n\n  return preparedPosts;\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { isLoading } from '../store';\n\ninterface Props {\n  getData: () => void;\n}\n\nexport const DownloadButton: React.FC<Props> = ({ getData }) => {\n  const loading = useSelector(isLoading);\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        onClick={getData}\n        disabled={loading}\n        className=\"loading-button\"\n      >\n        Get posts\n      </button>\n    </>\n  );\n};\n","import React, { ChangeEvent } from 'react';\n\ninterface Props {\n  startDebounce: (e: ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport const SearchInput: React.FC<Props> = ({ startDebounce }) => {\n\n\n  return (\n    <div className=\"inputContainer\">\n      <input\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"write a text for search\"\n        onChange={startDebounce}\n      />\n    </div>\n  );\n};\n","import React, { useMemo, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getPosts } from '../store';\nimport { deleteComm, deletePost } from '../store/posts';\nimport { filterPosts } from '../helpers/filterPosts';\nimport { debounce } from '../helpers/debounce';\nimport { SearchInput } from './Input';\n\nexport const PostsList: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const posts: Post[] = useSelector(getPosts);\n  const dispatch = useDispatch();\n\n  const debounceWrapper = debounce(\n    (value: string) => setQuery(value),\n    1000,\n  );\n\n  const startDebounce = (e: React.ChangeEvent<HTMLInputElement>) => {\n    debounceWrapper(e.target.value);\n  };\n\n  const visiblePosts: Post[] = useMemo(\n    () => filterPosts(posts, query),\n    [posts, query],\n  );\n\n  return (\n    <>\n    <SearchInput startDebounce={startDebounce} />\n      {visiblePosts.map(post => (\n        <div className=\"post\" key={post.id}>\n          <button\n            type=\"button\"\n            className=\"delete__post\"\n            onClick={() => dispatch(deletePost(post.id))}\n          >\n            delete post\n          </button>\n          <p className=\"post__title\">\n            <span className=\"post__id\">\n              {post.id}\n              .\n            </span>\n            {post.title}\n          </p>\n          <p className=\"post__body\">\n            {post.body}\n          </p>\n          {post.comments.map(comment => (\n            <div className=\"post__comm\" key={comment.id}>\n              <div className=\"comm\">\n                <p className=\"comm__name\">\n                  {comment.name}\n                </p>\n                <p className=\"comm__email\">\n                  {comment.email}\n                </p>\n                <p className=\"comm__body\">\n                  {comment.body}\n                </p>\n                <button\n                  className=\"delete__comm\"\n                  type=\"button\"\n                  onClick={() => dispatch(deleteComm(comment.id))}\n                >\n                  delete\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n      ))}\n    </>\n  );\n};\n","export const debounce = (f, delay) => {\n  let timerId;\n\n  return (...arg) => {\n    clearTimeout(timerId);\n    timerId = setTimeout(f, delay, ...arg)\n  }\n}\n","export const filterPosts = (posts: Post[], query: string) => {\n  if (!query) {\n    return posts;\n  }\n\n  return posts\n    .filter(post => (\n      post.title.toLocaleLowerCase() + post.body.toLocaleLowerCase\n    )\n      .replace(/s*/g, ' ')\n      .includes(query.toLocaleLowerCase().replace(/s*/g, ' ')));\n};\n","import React from 'react';\n\nimport './App.scss';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { isLoading, isLoaded } from './store';\nimport { SpinnerLoad } from './components/SpinnerLoad';\nimport { setLoading } from './store/loading';\nimport { preparedDatas } from './helpers/api';\nimport { setPostsData } from './store/posts';\nimport { setLoaded } from './store/loaded';\nimport { DownloadButton } from './components/DownloadButton';\nimport { PostsList } from './components/PostsList';\n\nconst App = () => {\n  const loading = useSelector(isLoading);\n  const loaded = useSelector(isLoaded);\n  const dispatch = useDispatch();\n\n  const getPostsData = () => {\n    dispatch(setLoading(true));\n\n    preparedDatas()\n      .then(data => {\n        dispatch(setPostsData(data));\n        dispatch(setLoaded());\n      })\n      .finally(() => dispatch(setLoading(false)));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Redux list of posts</h1>\n      {!loaded && (\n        <DownloadButton\n          getData={getPostsData}\n        />\n      )}\n      {loading && <SpinnerLoad />}\n      {loaded && <PostsList />}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'bulma/css/bulma.css';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}